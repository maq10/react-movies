{"version":3,"sources":["utils.js","MovieCard.js","MovieDetails.js","App.js","reportWebVitals.js","index.js"],"names":["getMoviesByName","search","a","url","fetch","res","json","data","truncate","str","len","substring","MovieCard","props","className","alt","src","posterUrl","title","type","MovieDetails","rated","runtime","genre","rating","plot","actors","App","state","searchTerm","isLoading","movies","error","this","setState","setTimeout","movieData","console","log","Search","map","movie","index","Title","Poster","Type","imdbID","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAAaA,EAAe,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,4DACX,yBAGD,WACTC,EALqB,UACX,yBADW,oBAIZ,WAJY,cAKmBF,GALnB,SAOTG,MAAMD,GAPG,cAOrBE,EAPqB,gBAQRA,EAAIC,OARI,cAQrBC,EARqB,yBASpBA,GAToB,4CAAH,sDAwBfC,EAAW,SAACC,GAAmB,IAAdC,EAAa,uDAAP,GAChC,MAAM,GAAN,OAAUD,EAAIE,UAAU,EAAGD,GAA3B,Q,OCbWE,EAVG,SAACC,GACf,OACI,sBAAKC,UAAU,aAAf,UACI,qBAAKC,IAAI,eAAeC,IAAKH,EAAMI,YACnC,4BAAIT,EAASK,EAAMK,MAAO,MAC1B,4BAAIL,EAAMM,WCwCPC,EA7CM,SAAC,GAAyF,IAAtFH,EAAqF,EAArFA,UAAWC,EAA0E,EAA1EA,MAAOG,EAAmE,EAAnEA,MAAOC,EAA4D,EAA5DA,QAA4D,IAAnDC,aAAmD,MAA3C,UAA2C,MAAhCC,cAAgC,MAAvB,EAAuB,EAApBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,OAC5F,OACI,sBAAKZ,UAAU,gBAAf,UACI,qBAAKA,UAAU,SAAf,SACI,qBAAKC,IAAI,eAAeC,IAAKC,MAEjC,gCACI,sBAAKH,UAAU,SAAf,UACI,mBAAGA,UAAU,QAAb,SAAsBI,IACtB,mBAAGJ,UAAU,SAAb,gBAAuBU,QAAvB,IAAuBA,IAAU,WAErC,+BACI,+BAAKF,EAAL,UACA,6BAAKD,IACL,6BAAKE,OAET,sBAAKT,UAAU,eAAf,UACI,mBAAGA,UAAU,QAAb,kBACA,4BAAIW,OAER,sBAAKX,UAAU,eAAf,UACI,mBAAGA,UAAU,QAAb,oBACA,4BAAIY,cCqDTC,E,kDAtEb,WAAYd,GAAQ,IAAD,8BACjB,cAAMA,IAEDe,MAAQ,CACXC,WAAY,SACZC,WAAW,EACXC,OAAQ,KACRC,MAAO,MAPQ,E,4FAWnB,iCAAA9B,EAAA,sDACE+B,KAAKC,SAAS,CACZJ,WAAW,IAGbK,WAAU,sBAAE,4BAAAjC,EAAA,+EAEgBF,EAAgB,EAAK4B,MAAMC,YAF3C,OAEFO,EAFE,OAGR,EAAKF,SAAS,CACZJ,WAAW,EACXC,OAAQK,EACRJ,MAAO,OAND,gDASR,EAAKE,SAAS,CACZJ,WAAW,EACXC,OAAQ,GACRC,MAAM,EAAD,KAZC,yDAeT,KApBL,gD,sFAwBA,WACEK,QAAQC,IAAIL,KAAKL,S,oBAGnB,WAEE,OACE,mCACIK,KAAKL,MAAME,UACT,8CAEA,qCACGG,KAAKL,MAAMG,QACVE,KAAKL,MAAMG,OAAOQ,OAAOC,KAAI,SAACC,EAAOC,GAAR,OAAmB,cAAC,EAAD,CAA8BxB,MAAOuB,EAAME,MAAO1B,UAAWwB,EAAMG,OAAQzB,KAAMsB,EAAMI,MAAvEJ,EAAMK,WAGxE,cAAC,EAAD,CACE7B,UAAU,4EACVC,MAAM,iBACNG,MAAM,QACNC,QAAS,IAETE,OAAQ,EACRC,KAAK,uCACLC,OAAQ,sC,GA7DNqB,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.abd5d98b.chunk.js","sourcesContent":["export const getMoviesByName = async (search) => {\r\n    const baseUrl = 'http://www.omdbapi.com'\r\n    // 2/26/21 - MQ - added util functions to fetch movie data - add my API KEY\r\n    // const apiKey = 'ADD YOUR API KEY HERE'\r\n    const apiKey = 'c0fc751e'\r\n    const url = `${baseUrl}/?apikey=${apiKey}&s=${search}`\r\n    \r\n    const res = await fetch(url);\r\n    const data = await res.json();\r\n    return data;\r\n};\r\n\r\nexport const getMovieDetailsById = async (movieId) => {\r\n    const baseUrl = 'http://www.omdbapi.com'\r\n    // 2/26/21 - MQ - added util functions to fetch movie data - add my API KEY\r\n    // const apiKey = 'ADD YOUR API KEY HERE'\r\n    const apiKey = 'c0fc751e'\r\n    const url = `${baseUrl}/?apikey=${apiKey}&i=${movieId}`\r\n\r\n    const res = await fetch(url);\r\n    const data = await res.json();\r\n    return data;\r\n};\r\n\r\nexport const truncate = (str, len = 10) => {\r\n    return `${str.substring(0, len)}...`\r\n}","import {truncate} from './utils';\r\n\r\nconst MovieCard = (props) => {\r\n    return (\r\n        <div className=\"movie-card\">\r\n            <img alt=\"movie poster\" src={props.posterUrl} />\r\n            <p>{truncate(props.title, 15)}</p>\r\n            <p>{props.type}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MovieCard;","// import PropTypes from 'prop-types';\r\n\r\nconst MovieDetails = ( { posterUrl, title, rated, runtime, genre = 'Unknown', rating = 0, plot, actors } ) => {\r\n    return (\r\n        <div className=\"movie-details\">\r\n            <div className=\"poster\">\r\n                <img alt=\"movie poster\" src={posterUrl} />\r\n            </div>\r\n            <div>\r\n                <div className=\"header\">\r\n                    <p className=\"title\">{title}</p>\r\n                    <p className=\"rating\">{rating ?? 'N/A'}</p>\r\n                </div>\r\n                <ul>\r\n                    <li>{runtime} min</li>\r\n                    <li>{rated}</li>\r\n                    <li>{genre}</li>\r\n                </ul>\r\n                <div className=\"info-section\">\r\n                    <p className=\"title\">Plot</p>\r\n                    <p>{plot}</p>\r\n                </div>\r\n                <div className=\"info-section\">\r\n                    <p className=\"title\">Actors</p>\r\n                    <p>{actors}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n// MovieDetails.propTypes = {\r\n//     posterUrl: PropTypes.string.isRequired,\r\n//     title: PropTypes.string.isRequired,\r\n//     rated: PropTypes.string.isRequired,\r\n//     runtime: PropTypes.number.isRequired,\r\n//     genre: PropTypes.string.isRequired,\r\n//     rating: PropTypes.number.isRequired,\r\n//     plot: PropTypes.string.isRequired,\r\n//     actors: PropTypes.string.isRequired,\r\n// }\r\n\r\n// MovieDetails.defaultProps = {\r\n//     rating: 0,\r\n//     genre: 'Unknown'\r\n// }\r\n\r\nexport default MovieDetails;","import React from 'react';\nimport MovieCard from './MovieCard';\nimport MovieDetails from './MovieDetails';\nimport { getMoviesByName } from './utils';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchTerm: 'batman',\n      isLoading: false, \n      movies: null,\n      error: null\n    }\n  }\n\n  async componentDidMount() {\n    this.setState({\n      isLoading: true\n    });\n\n    setTimeout( async () => {\n      try {\n        const movieData = await getMoviesByName(this.state.searchTerm)\n        this.setState({\n          isLoading: false,\n          movies: movieData,\n          error: null\n        })\n      } catch (error) {\n        this.setState({\n          isLoading: false,\n          movies: [],\n          error: error\n        })\n      }\n    }, 5000);\n    \n  }\n\n  componentDidUpdate() {\n    console.log(this.state)\n  }\n\n  render() {\n\n    return (\n      <>\n        { this.state.isLoading \n          ? <h1>Loading data</h1>\n          : (\n            <>\n              {this.state.movies &&\n                this.state.movies.Search.map((movie, index) => (<MovieCard key={movie.imdbID} title={movie.Title} posterUrl={movie.Poster} type={movie.Type} />)) \n              }\n        \n              <MovieDetails \n                posterUrl=\"https://upload.wikimedia.org/wikipedia/en/8/83/Batman_returns_poster2.jpg\"\n                title=\"Batman Returns\"\n                rated=\"PG-13\"\n                runtime={183}\n                // genre=\"Sci-fi\"\n                rating={0}\n                plot=\"Batman beats up a bunch of bad guys.\"\n                actors={\"Dani Devito, Henry Cavil\"}\n              />\n            </>\n          ) \n        }\n      </>\n    );\n  }\n  Ã¥\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}