{"version":3,"sources":["utils.js","MovieCard.js","MovieDetails.js","ListView.js","Modal.js","App.js","reportWebVitals.js","index.js"],"names":["getMoviesByName","search","a","process","url","fetch","res","json","data","getMovieDetailsById","movieId","truncate","str","len","substring","MovieCard","props","className","onClick","alt","src","posterUrl","title","type","MovieDetails","rated","runtime","genre","rating","plot","actors","ListView","list","render","map","item","Modal","show","onClose","children","style","display","App","state","searchTerm","isLoading","movies","error","showModal","currentMovie","setModalState","bind","this","setState","setTimeout","movieData","console","log","movie","Search","Title","Poster","Type","onMovieCardClicked","imdbID","Rated","Runtime","Genre","Ratings","Value","Plot","Actors","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.028840ce.chunk.js","sourcesContent":["// 2/26/21 - MQ - added util functions to fetch movie data\n// 2/26/21 - MQ - create a function called getMoviesByName with a parameter(argument) called search\nexport const getMoviesByName = async (search) => {\n    // create a string constant variable called baseUrl with the value of the movie api website\n    const baseUrl = 'https://www.omdbapi.com'\n    // 2/26/21 - MQ - you would add your API KEY here\n    // const apiKey = 'YOUR API KEY WOULD GO HERE'\n    const apiKey = process.env.REACT_APP_OMDB_API_KEY;\n    const url = `${baseUrl}/?apikey=${apiKey}&s=${search}`\n    \n    const res = await fetch(url);\n    const data = await res.json();\n    return data;\n};\n\n// 2/26/21 - MQ - create a function called getMovieDetailsById with a parameter(argument) called movieId\nexport const getMovieDetailsById = async (movieId) => {\n    // create a string constant variable called baseUrl with the value of the movie api website\n    const baseUrl = 'https://www.omdbapi.com'\n    // 2/26/21 - MQ - you would add your API KEY here\n    //const apiKey = 'YOUR API KEY WOULD GO HERE'\n    const apiKey = process.env.REACT_APP_OMDB_API_KEY;\n    const url = `${baseUrl}/?apikey=${apiKey}&i=${movieId}`\n\n    const res = await fetch(url);\n    const data = await res.json();\n    return data;\n};\n\nexport const truncate = (str, len = 10) => {\n    return `${str.substring(0, len)}...`\n}","import {truncate} from './utils';\n\nconst MovieCard = (props) => {\n    return (\n        <div className=\"movie-card\" onClick={props.onClick}>\n            <img alt=\"movie poster\" src={props.posterUrl} />\n            <p>{truncate(props.title, 15)}</p>\n            <p>{props.type}</p>\n        </div>\n    )\n}\n\nexport default MovieCard;","// import PropTypes from 'prop-types';\n\nconst MovieDetails = ( { posterUrl, title, rated, runtime, genre = 'Unknown', rating = 0, plot, actors } ) => {\n    return (\n        <div className=\"movie-details\">\n            <div className=\"poster\">\n                <img alt=\"movie poster\" src={posterUrl} />\n            </div>\n            <div>\n                <div className=\"header\">\n                    <p className=\"title\">{title}</p>\n                    <p className=\"rating\">{rating ?? 'N/A'}</p>\n                </div>\n                <ul>\n                    <li>{runtime} min</li>\n                    <li>{rated}</li>\n                    <li>{genre}</li>\n                </ul>\n                <div className=\"info-section\">\n                    <p className=\"title\">Plot</p>\n                    <p>{plot}</p>\n                </div>\n                <div className=\"info-section\">\n                    <p className=\"title\">Actors</p>\n                    <p>{actors}</p>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n// MovieDetails.propTypes = {\n//     posterUrl: PropTypes.string.isRequired,\n//     title: PropTypes.string.isRequired,\n//     rated: PropTypes.string.isRequired,\n//     runtime: PropTypes.number.isRequired,\n//     genre: PropTypes.string.isRequired,\n//     rating: PropTypes.number.isRequired,\n//     plot: PropTypes.string.isRequired,\n//     actors: PropTypes.string.isRequired,\n// }\n\n// MovieDetails.defaultProps = {\n//     rating: 0,\n//     genre: 'Unknown'\n// }\n\nexport default MovieDetails;","import MovieCard from './MovieCard';\r\n\r\nconst ListView = ({ list=[], render }) => {\r\n    return list.map((item) => {\r\n        return <>{render(item)}</>\r\n        // <MovieCard key={movie.imdbID} title={movie.Title} posterUrl={movie.Poster} type={movie.Type} />\r\n    });\r\n};\r\n\r\nexport default ListView;","import { render } from \"react-dom/cjs/react-dom.development\";\r\n\r\nconst Modal = ({show=false, onClose, children}) => {\r\n    return (\r\n        <div className=\"modal\" style={{display: show ? 'flex' : 'none'}}>\r\n            <div className=\"modal-content\">\r\n                <div>\r\n                    <button onClick={onClose}>X</button>\r\n                </div>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal;\r\n","import React from 'react';\n// import the MovieCard component\nimport MovieCard from './MovieCard';\n// import the MovieDetails component\nimport MovieDetails from './MovieDetails';\n// import the ListView component\nimport ListView from './ListView';\n// import the Modal component\nimport Modal from './Modal';\n// import the getMoviesByName and getMovieDetailsById functions from utils.js\nimport { getMoviesByName, getMovieDetailsById } from './utils';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchTerm: 'batman',\n      isLoading: false, \n      movies: null,\n      error: null,\n      showModal: false,\n      currentMovie: null,\n    }\n\n    this.setModalState = this.setModalState.bind(this);\n  }\n\n  setModalState(show=false) {\n    this.setState({\n      showModal: show\n    });\n  }\n\n  async componentDidMount() {\n    this.setState({\n      isLoading: true\n    });\n\n    setTimeout( async () => {\n      try {\n        const movieData = await getMoviesByName(this.state.searchTerm)\n        this.setState({\n          isLoading: false,\n          movies: movieData,\n          error: null\n        })\n      } catch (error) {\n        this.setState({\n          isLoading: false,\n          movies: [],\n          error: error\n        })\n      }\n    }, 1000);\n    \n  }\n\n  componentDidUpdate() {\n    console.log(this.state)\n  }\n\n  async onMovieCardClicked(movieId) {\n    const movie = await getMovieDetailsById(movieId);\n    this.setState({\n      currentMovie: movie,\n      showModal: true\n    })\n  }\n\n  render() {\n\n    const {currentMovie} = this.state;\n\n    return (\n      // ----------\n      <>\n        { this.state.isLoading \n          ? <h1>Loading data</h1>\n          : (\n            <>\n              <ListView \n                list={this.state.movies?.Search} \n                render={(movie) => (\n                  <MovieCard \n                    title={movie.Title} \n                    posterUrl={movie.Poster} \n                    type={movie.Type} \n                    onClick={() => this.onMovieCardClicked(movie.imdbID)}\n                  />\n                )}\n              />\n              <Modal show={this.state.showModal} onClose={() => this.setModalState(false)}>\n                <MovieDetails \n                  posterUrl={currentMovie?.Poster}\n                  title={currentMovie?.Title}\n                  rated={currentMovie?.Rated}\n                  runtime={currentMovie?.Runtime}\n                  genre={currentMovie?.Genre}\n                  rating={currentMovie?.Ratings[0]?.Value}\n                  plot={currentMovie?.Plot}\n                  actors={currentMovie?.Actors}\n                />\n              </Modal>\n            </>\n          ) \n        }\n      </>\n      // ----------\n    );\n  }\n  å\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}